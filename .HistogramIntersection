The `HistogramIntersection` module
======================

This module is for the similar image search using the Histogram Intersection.
This module is dependent on the PIL(Pillow). First import `histogram`:

    >>> import HistogramIntersection as hi
    >>> from PIL import Image
    >>> img = Image.open('test.jpg')


Using `getrgb(ImgObj)`
-------------------

This module gets the RGB value by an PIL.Image in argument.

    Use it:

    >>> rgb = hi.getrgb(img)
    >>> rgb[0]
    (0, 0, 0)


Using `makehistogram(rgb)`
-------------------

This module processes the Image Object to the RGB histogram which quality is
defined in the PALETTE.

    Use it:

    >>> histogram = hi.makehistogram(rgb)
    >>> len(histogram) == 1 << (hi.PALLETE*3)
    True
    >>> histogram[0]
    0


Using `intersection(histogram, comparison)`
-------------------

This module calculates the similarity by two histograms.

    Use it:

    >>> rgb = hi.getrgb(img)
    >>> comparison = hi.makehistogram(rgb)
    >>> similarity = intersection(histogram, comparison)
    >>> similarity == 1.0
    True


Using `crop(ImgObj)`
-------------------

This module divide ImgObj to some crops defined in DIVISION by PIL module.

    Use it:

    >>> crops = hi.crop(img)
    >>> len(crops) == hi.DIVISION
    True


Using `slicehistogram(histogram)`
-------------------

This module divide ImgObj to some crops defined in SLICE by list-slice.

    Use it:

    >>> sliced = hi.slicehistogram(histogram)
    >>> len(histogram) == hi.SLICE
    True


Using `histogen(ImgObj)`
-------------------

This module creates ImgObj's histogram for experiments.

    Use it:

    >>> experiment = hi.histogen()
    >>> len(experiment) == hi.DIVISION
    True
    >>> len(experiment[0]) == hi.SLICE
    True


Using `exMultiHistogen(directory, ignore=[])`
-------------------

This module is to create a histogram of jpeg which in `directory` without
`ignore` in `proc` parallel using `multiprocessing.Pool`.

    Use it:

    >>> try:
    ...     exMultiHistogen('directory/is/not/exsist')
    ... excpt:
    ...     print('error')
    error
    >>> exMultiHistogen('./')
    created: test
    Completed.


Using `exStackHistogram(filename, directory, histodir)`
-------------------

This module is to create `filename`'s histogram dataset in `directory` for
experiments. This histogram dataset is into the path `histodir`.

    Use it:

    >>> try:
    ...     exStackHistogram('test.jpg', './', 'directory/is/not/exsist')
    ... excpt:
    ...     print('error')
    error
    >>> exStackHistogram('test.jpg', './', '.histogram')
    empty: already exist


Using `exLookLike(ImgObj, histodir)`
-------------------

This module finds number of image in `directory` which is similar to ImgObj.

    Use it:

    >>> exLookLike(img, './')
    1


Using `compare(base, histogram)`
-------------------

This module compera histogram in intersection.

    Use it:

    >>> 
